---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';
import { SITE_TITLE, TWITTER_HANDLE } from '../consts';
import FallbackImage from '../assets/default-ogp-image.png';
import type { ImageMetadata } from 'astro';

interface Props {
	title: string;
	description: string;
	image?: ImageMetadata;
	article?: {
		publishedTime: string;
		author: string;
		tags?: string[];
		type?: 'Article' | 'BlogPosting';
		modifiedTime?: string;
	};
	webpage?: {
		type: 'WebSite' | 'Blog';
		name: string;
		alternateName?: string;
	};
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = FallbackImage, article, webpage } = Astro.props;

// 画像メタデータを自動取得
const imageWidth = image.width || 1200;
const imageHeight = image.height || 630;
const imageAlt = `${title} - ${SITE_TITLE}`;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="sitemap" href="/sitemap-index.xml" />
<link
	rel="alternate"
	type="application/rss+xml"
	title={SITE_TITLE}
	href={new URL('rss.xml', Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={article ? "article" : "website"} />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image.src, Astro.url)} />
<meta property="og:image:width" content={imageWidth.toString()} />
<meta property="og:image:height" content={imageHeight.toString()} />
<meta property="og:image:alt" content={imageAlt} />
<meta property="og:site_name" content={SITE_TITLE} />
<meta property="og:locale" content="ja_JP" />

<!-- Facebook Article Meta -->
{article && (
	<>
		<meta property="article:published_time" content={article.publishedTime} />
		{article.modifiedTime && <meta property="article:modified_time" content={article.modifiedTime} />}
		<meta property="article:author" content={article.author} />
		<meta property="article:section" content="Blog" />
		{article.tags && article.tags.map(tag => 
			<meta property="article:tag" content={tag} />
		)}
	</>
)}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image.src, Astro.url)} />
<meta name="twitter:site" content={TWITTER_HANDLE} />
<meta name="twitter:creator" content={TWITTER_HANDLE} />

<!-- Structured Data (JSON-LD) -->
{article && (
	<script type="application/ld+json" set:html={JSON.stringify({
		"@context": "https://schema.org",
		"@type": article.type || "Article",
		"headline": title,
		"description": description,
		"author": {
			"@type": "Person",
			"name": article.author
		},
		"datePublished": article.publishedTime,
		"image": new URL(image.src, Astro.url).toString(),
		"url": canonicalURL.toString(),
		"publisher": {
			"@type": "Organization",
			"name": SITE_TITLE,
			"logo": {
				"@type": "ImageObject",
				"url": new URL("/favicon.svg", Astro.site).toString()
			}
		},
		...(article.tags && { "keywords": article.tags.join(", ") })
	})} />
)}

{webpage && (
	<script type="application/ld+json" set:html={JSON.stringify({
		"@context": "https://schema.org",
		"@type": webpage.type,
		"name": webpage.name,
		"url": Astro.site?.toString(),
		...(webpage.alternateName && { "alternateName": webpage.alternateName }),
		"description": description
	})} />
)}
