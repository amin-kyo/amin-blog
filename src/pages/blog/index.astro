---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import ArticleCard from '../../components/ArticleCard.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import { getAllTags } from '../../utils/blog';

const posts = (await getCollection('blog'))
  .filter(post => !post.data.draft) // 下書きを除外
  .sort((a, b) => {
    const dateA = new Date(a.data.publishDate);
    const dateB = new Date(b.data.publishDate);
    return dateB.getTime() - dateA.getTime(); // 新しい順
  });

const allTags = await getAllTags();
const popularTags = allTags.slice(0, 10); // 人気タグ上位10個

// 月別アーカイブ作成
const monthlyArchive = posts.reduce((acc, post) => {
  const date = new Date(post.data.publishDate);
  const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
  const monthLabel = `${date.getFullYear()}年${date.getMonth() + 1}月`;
  
  if (!acc[monthKey]) {
    acc[monthKey] = { label: monthLabel, count: 0 };
  }
  acc[monthKey].count++;
  return acc;
}, {} as Record<string, { label: string; count: number }>);

const sortedArchive = Object.entries(monthlyArchive)
  .sort(([a], [b]) => b.localeCompare(a))
  .slice(0, 12); // 直近12ヶ月
---

<!doctype html>
<html lang="ja">
<head>
  <BaseHead title={`Blog | ${SITE_TITLE}`} description={`${SITE_DESCRIPTION} - 全記事一覧`} />
</head>
<body>
  <Header />
  <main class="container-wide">
    <header class="page-header">
      <h1 class="page-title gradient-text">Blog Archive</h1>
      <p class="text-lg text-secondary">
        {posts.length}件の記事
      </p>
    </header>

    <div class="blog-layout">
      <!-- メインコンテンツ -->
      <section class="articles-section">
        {posts.length === 0 ? (
          <div class="card card-padding text-center">
            <p class="text-lg text-secondary">記事がありません。</p>
          </div>
        ) : (
          <div class="grid grid-auto-fit">
            {posts.map(post => (
              <ArticleCard
                title={post.data.title}
                publishDate={post.data.publishDate}
                tags={post.data.tags || []}
                slug={post.id}
              />
            ))}
          </div>
        )}
      </section>

      <!-- サイドバー -->
      <aside class="sidebar">
        <!-- 人気タグ -->
        <div class="card card-padding mb-xl">
          <h3 class="sidebar-title">Popular Tags</h3>
          <div class="flex flex-wrap gap-sm">
            {popularTags.map(tag => (
              <a href={`/blog/tags/${tag}`} class="tag">
                #{tag}
              </a>
            ))}
          </div>
        </div>

        <!-- 月別アーカイブ -->
        <div class="card card-padding mb-xl">
          <h3 class="sidebar-title">Archive</h3>
          <ul class="archive-list">
            {sortedArchive.map(([key, data]) => (
              <li class="archive-item">
                <a href={`/blog/archive/${key}`} class="archive-link">
                  <span class="archive-month">{data.label}</span>
                  <span class="archive-count text-sm text-secondary">({data.count})</span>
                </a>
              </li>
            ))}
          </ul>
        </div>

        <!-- 統計情報 -->
        <div class="card card-padding">
          <h3 class="sidebar-title">Stats</h3>
          <div class="stats-grid">
            <div class="stat-item gradient-bg text-center p-md">
              <span class="stat-number">{posts.length}</span>
              <span class="stat-label">記事</span>
            </div>
            <div class="stat-item gradient-bg text-center p-md">
              <span class="stat-number">{allTags.length}</span>
              <span class="stat-label">タグ</span>
            </div>
            <div class="stat-item gradient-bg text-center p-md">
              <span class="stat-number">{Object.keys(monthlyArchive).length}</span>
              <span class="stat-label">ヶ月</span>
            </div>
          </div>
        </div>
      </aside>
    </div>
  </main>
  <Footer />
</body>
</html>

<style>
  /* ブログレイアウト */
  .blog-layout {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: var(--spacing-2xl);
    align-items: start;
  }

  .articles-section {
    min-height: 600px;
  }

  /* サイドバー */
  .sidebar {
    position: sticky;
    top: var(--spacing-xl);
    display: flex;
    flex-direction: column;
  }

  .sidebar-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #2d3748;
    margin-bottom: var(--spacing-md);
    padding-bottom: var(--spacing-sm);
    border-bottom: 2px solid var(--primary-color);
  }

  /* アーカイブリスト */
  .archive-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .archive-item {
    margin-bottom: var(--spacing-sm);
  }

  .archive-link {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-sm) 0;
    text-decoration: none;
    color: #4a5568;
    border-bottom: 1px solid #e2e8f0;
    transition: color 0.2s ease;
  }

  .archive-link:hover {
    color: var(--primary-color);
  }

  .archive-month {
    font-weight: 500;
  }

  /* 統計情報 */
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--spacing-md);
  }

  .stat-item {
    border-radius: var(--border-radius);
    color: white;
  }

  .stat-number {
    display: block;
    font-size: 1.5rem;
    font-weight: 700;
  }

  .stat-label {
    font-size: 0.875rem;
    opacity: 0.9;
  }

  /* レスポンシブ対応 */
  @media (max-width: 1024px) {
    .blog-layout {
      grid-template-columns: 1fr;
      gap: var(--spacing-xl);
    }

    .sidebar {
      position: static;
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: var(--spacing-md);
    }
  }

  @media (max-width: 768px) {
    .sidebar {
      grid-template-columns: 1fr;
    }

    .stats-grid {
      grid-template-columns: 1fr;
    }
  }
</style>