---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { Image } from 'astro:assets';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, publishDate, updatedDate, heroImage, tags = [] } = Astro.props;

// 関連記事を取得（同じタグを持つ記事を3件まで）
import { getCollection } from 'astro:content';
const allPosts = await getCollection('blog');
const relatedPosts = allPosts
  .filter(post => !post.data.draft && post.data.title !== title)
  .filter(post => post.data.tags?.some(tag => tags.includes(tag)))
  .sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime())
  .slice(0, 3);
---

<!DOCTYPE html>
<html lang="ja">
  <head>
    <BaseHead 
      title={title} 
      description={description} 
      image={heroImage}
      article={{
        publishedTime: publishDate.toISOString(),
        modifiedTime: updatedDate?.toISOString(),
        author: "Amin",
        tags: tags,
        type: "BlogPosting"
      }}
    />
  </head>
  <body>
    <Header />
    
    <main class="container-narrow">
      <!-- ヒーローセクション -->
      <header class="page-header">
        {heroImage && (
          <div class="hero-image-wrapper">
            <Image 
              class="hero-image" 
              width={800} 
              height={400} 
              src={heroImage} 
              alt={title}
              data-error-placeholder="hero-image-placeholder"
            />
          </div>
        )}
        
        <h1 class="page-title gradient-text">{title}</h1>
        
        <div class="flex justify-center flex-wrap gap-4 mb-6">
          <time class="text-sm text-secondary" datetime={publishDate.toISOString()}>
            <FormattedDate date={publishDate} />
          </time>
          
          {updatedDate && (
            <time class="text-sm text-secondary" datetime={updatedDate.toISOString()}>
              更新: <FormattedDate date={updatedDate} />
            </time>
          )}
        </div>
        
        {tags.length > 0 && (
          <div class="flex justify-center flex-wrap gap-4">
            {tags.map(tag => (
              <a href={`/blog/tags/${tag}`} class="tag tag-primary">
                #{tag}
              </a>
            ))}
          </div>
        )}
      </header>

      <!-- 記事本文 -->
      <article class="post-content card card-padding-lg mb-12">
        <slot />
      </article>

      <!-- 関連記事セクション -->
      {relatedPosts.length > 0 && (
        <aside class="card card-padding mb-12">
          <h2 class="section-title text-center">関連記事</h2>
          <div class="grid grid-auto-fill-sm gap-6">
            {relatedPosts.map(post => (
              <article class="related-card">
                <h3 class="related-card-title">
                  <a href={`/blog/${post.id}`}>{post.data.title}</a>
                </h3>
                <time class="text-sm text-secondary mb-2" datetime={post.data.publishDate.toISOString()}>
                  <FormattedDate date={post.data.publishDate} />
                </time>
                {post.data.tags && post.data.tags.length > 0 && (
                  <div class="flex flex-wrap gap-2">
                    {post.data.tags.slice(0, 3).map(tag => (
                      <span class="tag">{tag}</span>
                    ))}
                  </div>
                )}
              </article>
            ))}
          </div>
        </aside>
      )}

      <!-- ナビゲーション -->
      <nav class="text-center">
        <a href="/blog" class="nav-back">ブログ一覧に戻る</a>
      </nav>
    </main>

    <Footer />
    
    <script>
      // 画像エラーハンドリング
      document.addEventListener('DOMContentLoaded', () => {
        // ヒーロー画像のエラーハンドリング
        const heroImage = document.querySelector('.hero-image');
        if (heroImage) {
          heroImage.addEventListener('error', (e) => {
            const img = e.target as HTMLImageElement;
            const wrapper = img?.parentElement;
            
            if (wrapper && !wrapper.querySelector('.image-placeholder')) {
              const placeholder = document.createElement('div');
              placeholder.className = 'image-placeholder hero-image-placeholder';
              placeholder.innerHTML = `
                <div class="image-placeholder-content">
                  <svg class="image-placeholder-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                    <circle cx="9" cy="9" r="2"/>
                    <path d="M21 15l-3.086-3.086a2 2 0 00-2.828 0L6 21"/>
                  </svg>
                  <span class="image-placeholder-text">画像を読み込めませんでした</span>
                </div>
              `;
              
              img.style.display = 'none';
              wrapper.appendChild(placeholder);
            }
          });
        }
        
        // 記事内の全画像にエラーハンドリングを適用
        const contentImages = document.querySelectorAll('.prose img, article img, main img');
        contentImages.forEach(img => {
          img.addEventListener('error', (e) => {
            const image = e.target as HTMLImageElement;
            const wrapper = image?.parentElement;
            
            if (wrapper && !wrapper.querySelector('.image-placeholder')) {
              const placeholder = document.createElement('div');
              placeholder.className = 'image-placeholder article-card-image-placeholder';
              placeholder.innerHTML = `
                <div class="image-placeholder-content">
                  <svg class="image-placeholder-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                    <circle cx="9" cy="9" r="2"/>
                    <path d="M21 15l-3.086-3.086a2 2 0 00-2.828 0L6 21"/>
                  </svg>
                  <span class="image-placeholder-text">画像を読み込めませんでした</span>
                </div>
              `;
              
              image.style.display = 'none';
              wrapper.appendChild(placeholder);
            }
          });
        });
      });
    </script>
  </body>
</html>