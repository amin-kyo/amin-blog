---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { Image } from 'astro:assets';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, publishDate, updatedDate, heroImage, tags = [] } = Astro.props;

// 関連記事を取得（同じタグを持つ記事を3件まで）
import { getCollection } from 'astro:content';
const allPosts = await getCollection('blog');
const relatedPosts = allPosts
  .filter(post => !post.data.draft && post.data.title !== title)
  .filter(post => post.data.tags?.some(tag => tags.includes(tag)))
  .sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime())
  .slice(0, 3);
---

<!DOCTYPE html>
<html lang="ja">
  <head>
    <BaseHead title={title} description={description} image={heroImage} />
  </head>
  <body>
    <Header />
    
    <main class="container-narrow">
      <!-- ヒーローセクション -->
      <header class="page-header">
        {heroImage && (
          <div class="hero-image-wrapper">
            <Image class="hero-image" width={800} height={400} src={heroImage} alt={title} />
          </div>
        )}
        
        <h1 class="page-title gradient-text">{title}</h1>
        
        <div class="flex-center flex-wrap gap-md mb-lg">
          <time class="text-sm text-secondary" datetime={publishDate.toISOString()}>
            <FormattedDate date={publishDate} />
          </time>
          
          {updatedDate && (
            <time class="text-sm text-secondary" datetime={updatedDate.toISOString()}>
              更新: <FormattedDate date={updatedDate} />
            </time>
          )}
        </div>
        
        {tags.length > 0 && (
          <div class="flex-center flex-wrap gap-md">
            {tags.map(tag => (
              <a href={`/blog/tags/${tag}`} class="tag tag-primary">
                #{tag}
              </a>
            ))}
          </div>
        )}
      </header>

      <!-- 記事本文 -->
      <article class="post-content card card-padding-lg mb-2xl">
        <slot />
      </article>

      <!-- 関連記事セクション -->
      {relatedPosts.length > 0 && (
        <aside class="card card-padding mb-2xl">
          <h2 class="section-title text-center">関連記事</h2>
          <div class="grid grid-auto-fit-sm gap-lg">
            {relatedPosts.map(post => (
              <article class="related-card">
                <h3 class="related-card-title">
                  <a href={`/blog/${post.id}`}>{post.data.title}</a>
                </h3>
                <time class="text-sm text-secondary mb-sm" datetime={post.data.publishDate.toISOString()}>
                  <FormattedDate date={post.data.publishDate} />
                </time>
                {post.data.tags && post.data.tags.length > 0 && (
                  <div class="flex flex-wrap gap-sm">
                    {post.data.tags.slice(0, 3).map(tag => (
                      <span class="tag">{tag}</span>
                    ))}
                  </div>
                )}
              </article>
            ))}
          </div>
        </aside>
      )}

      <!-- ナビゲーション -->
      <nav class="text-center">
        <a href="/blog" class="nav-back">ブログ一覧に戻る</a>
      </nav>
    </main>

    <Footer />
  </body>
</html>